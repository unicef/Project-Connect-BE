# Generated by Django 2.2.16 on 2020-09-29 13:59

from django.db import migrations
from django.db.models import Prefetch, Q


def set_correct_data_school_weekly_statuses(apps, schema_editor):
    SchoolWeeklyStatus = apps.get_model('connection_statistics', 'SchoolWeeklyStatus')
    School = apps.get_model('schools', 'School')

    # SchoolWeeklyStatuses
    for school in School.objects.all():
        qs_school_weekly = SchoolWeeklyStatus.objects.filter(school=school)
        if qs_school_weekly.filter(Q(connectivity_speed__isnull=False) & ~Q(connectivity_speed=0)).exists():
            last_school_weekly = qs_school_weekly.last()
            if not last_school_weekly.connectivity_speed:
                last_school_weekly_with_speed = qs_school_weekly.filter(
                    Q(connectivity_speed__isnull=False) & ~Q(connectivity_speed=0)).last()
                last_school_weekly.connectivity_speed = last_school_weekly_with_speed.connectivity_speed
                last_school_weekly.connectivity_latency = last_school_weekly_with_speed.connectivity_latency
                last_school_weekly.connectivity_availability = last_school_weekly_with_speed.connectivity_availability
                last_school_weekly.connectivity_status = last_school_weekly_with_speed.connectivity_status
                last_school_weekly.connectivity = True
                last_school_weekly.save()


def set_correct_data_country_weekly_statuses(apps, schema_editor):
    CountryWeeklyStatus = apps.get_model('connection_statistics', 'CountryWeeklyStatus')
    SchoolWeeklyStatus = apps.get_model('connection_statistics', 'SchoolWeeklyStatus')
    Country = apps.get_model('locations', 'Country')

    # CountryWeeklyStatuses
    for country in Country.objects.all():
        country_weekly = CountryWeeklyStatus.objects.filter(country=country).last()
        if country_weekly.connectivity_speed != 0 and country_weekly.schools_connected == 0:

            statistics = {
                'schools_total': 0,
                'schools_connected': 0,
                'schools_connectivity_no': 0,
                'schools_connectivity_unknown': 0,
                'schools_connectivity_moderate': 0,
                'schools_connectivity_good': 0,
            }
            country_schools = country.schools.all().prefetch_related(
                Prefetch(
                    'weekly_status',
                    SchoolWeeklyStatus.objects.order_by('school_id', '-year', '-week').distinct('school_id'),
                    to_attr='latest_status',
                ),
            )

            # slower but much easier to work with
            for school in country_schools:
                statistics['schools_total'] += 1
                if not school.latest_status:
                    statistics['schools_connectivity_unknown'] += 1
                    continue

                latest_status = school.latest_status[0]

                connectivity_status = 'moderate'
                if not latest_status.connectivity:
                    connectivity_status = 'no'
                elif not latest_status.connectivity_speed:
                    connectivity_status = 'unknown'
                elif latest_status.connectivity_speed > 5:
                    connectivity_status = 'good'

                if connectivity_status == 'no':
                    statistics['schools_connectivity_no'] += 1
                elif connectivity_status == 'unknown':
                    statistics['schools_connectivity_unknown'] += 1
                    statistics['schools_connected'] += 1
                elif connectivity_status == 'moderate':
                    statistics['schools_connectivity_moderate'] += 1
                    statistics['schools_connected'] += 1
                elif connectivity_status == 'good':
                    statistics['schools_connectivity_good'] += 1
                    statistics['schools_connected'] += 1

            for field, value in statistics.items():
                setattr(country_weekly, field, value)

            country_weekly.save()


class Migration(migrations.Migration):

    dependencies = [
        ('connection_statistics', '0021_auto_20200928_1317'),
        ('locations', '0006_country_date_of_join'),
        ('schools', '0008_auto_20200915_0754'),
    ]

    operations = [
        migrations.RunPython(set_correct_data_school_weekly_statuses, migrations.RunPython.noop),
        migrations.RunPython(set_correct_data_country_weekly_statuses, migrations.RunPython.noop),
    ]
